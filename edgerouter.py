# edgerouter.py
# This project is authored by Bradley Herrin and Josh Moore.
# It is covered under the GPL-3.0 license.
# The goal of this project is to use Python to
# auto-provision Ubiquiti EdgeMax and AirMax products.
# View the full project on GitHub
# https://github.com/bradleyherrin/ubiquiti-auto-provisioning

# Imports
import pexpect

# Variables
router = "192.168.1.1"
linux_pc = "192.168.1.199"
tftp = "add system image tftp://" + linux_pc + "/"
e50firmware = "ER-e50.v1.10.8.5142457.tar"
e100firmware = "ER-e100.v1.10.8.5142440.tar"
e200firmware = "ER-e200.v1.10.8.5142441.tar"
e300firmware = "ER-e300.v1.10.8.5142457.tar"
e1000firmware = "ER-e1000.v1.10.8.5142441.tar"
wan_in = "set firewall name WAN_IN "
wan_local = "set firewall name WAN_LOCAL "
allow_er = "'Allow established/related'"
ethernet = "set interfaces ethernet "
switch = "set interfaces switch "
bridge = "set interfaces bridge "
dhcp = "set service dhcp-server "
net_name = "shared-network-name LAN subnet "
start_stop = " start 192.168.1.38 stop 192.168.1.243"
syslog = "set system syslog "
sys_login = "set system login "
user_auth = " authentication plaintext-password "
nat = "set service nat "
unms_key = "YourKeyHere"
creds = "ubnt"
new_user = "ChangeMe123"
new_pass = "ChangeMe123"
ppp_user = "ChangeMe123"
ppp_pass = "ChangeMe123"

ssh1 = pexpect.spawn("ssh " + creds + "@" + router)
under_construction = "Router Configuration Under Construction"

# Functions


def configuring_um():
    print("---------------------------------------------".center(45))
    print("Configuring Router".center(45))
    print("---------------------------------------------".center(45))


def model_not_found_um():
    print("---------------------------------------------".center(45))
    print("Router model not found.".center(45))
    print("Router was not updated or configured.".center(45))
    print("---------------------------------------------".center(45))


def configured_successfully_um():
    print("---------------------------------------------".center(45))
    print("Router Configured Successfully!".center(45))
    print("---------------------------------------------".center(45))


def active_reboot_um():
    print("---------------------------------------------".center(45))
    print("Setting firmware as active and rebooting.".center(45))
    print("---------------------------------------------".center(45))


def updating_firmware_um():
    print("---------------------------------------------".center(45))
    print("Updating router firmware...".center(45))
    print("---------------------------------------------".center(45))


def default_login():
    ssh1.expect("password:")
    ssh1.sendline(creds)
    ssh1.expect("$")


def version_check():
    ssh1.sendline("show version")
    ssh1.expect("HW S/N")


def firmware_check():
    ssh1.sendline("show system image")
    ssh1.expect("(running image) (default boot)")


def e50_fw_update():
    ssh1.sendline("delete system image")
    ssh1.expect("(Yes/No)")
    ssh1.sendline("yes")
    ssh1.expect("$")
    ssh1.sendline(tftp + e50firmware)
    ssh1.expect("(Yes/No)")
    ssh1.sendline("yes")


def e100_fw_update():
    ssh1.sendline(tftp + e100firmware)
    ssh1.expect("")


def e200_fw_update():
    ssh1.sendline(tftp + e200firmware)
    ssh1.expect("")


def e300_fw_update():
    ssh1.sendline(tftp + e300firmware)
    ssh1.expect("")


def e1000_fw_update():
    ssh1.sendline(tftp + e1000firmware)
    ssh1.expect("")


def set_active_reboot():
    ssh1.sendline("set system image default-boot")
    ssh1.expect("$")
    ssh1.sendline("reboot")
    ssh1.expect("[confirm]")
    ssh1.sendline("y")

# Use this section to build your own configs
# using tn.sendline and tn.expect. The config
# I have added is the same as doing the Basic
# config wizard with DHCP for the WAN and
# 192.168.1.1/24 as the LAN with the addition
# of PPP running on the DHCP WAN port. This
# makes this device plug & play for most
# environments, allowing a remote technician
# to finalize the config easily. Make sure to
# add your key to the unms_key variable and
# uncomment the lines in the switch config.

# Also, a disclaimer, I don't have an ER-8 to test
# with. I'm assuming it reports "EdgeRouter" as
# the HW Model. If you provison the ER-8 often, I
# would do a show version command on one to be sure.


def config():
    ssh2 = pexpect.spawn("ssh " + new_user + "@" + router)
    ssh2.expect("password:")
    ssh2.sendline(new_pass)
    ssh2.expect("$")
    ssh2.sendline("show version")
    ssh2.expect("HW S/N")
    if "EdgeRouter X SFP" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth0")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth1")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth2")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth3")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port vlan-aware disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on switch0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter X" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth0")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth1")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth2")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth3")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port vlan-aware disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on switch0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter 10X" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth0")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth1")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth2")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth3")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth4")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth5")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth6")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth7")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth8")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port vlan-aware disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on switch0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgePoint Router 6" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter Lite" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter PoE" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth2")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth3")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth4")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port vlan-aware disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on switch0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter Pro" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth5 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth6 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgePoint Router 8" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth5 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter 4" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter 6P" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth5 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter 12" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth9 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth0")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth1")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth2")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth3")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth4")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth5")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth6")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port interface eth7")
        ssh2.expect("#")
        ssh2.sendline(switch + "switch0 switch-port vlan-aware disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on switch0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter Infinity" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth8 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth5 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth6 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    elif "EdgeRouter" in ssh1.before:
        ssh2.expect("$")
        ssh2.sendline("configure")
        ssh2.expect("#")
        ssh2.sendline("set firewall all-ping enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall broadcast-ping disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ipv6-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall ip-src-route disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall log-martians enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to internal'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "default-action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "description 'WAN to router'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 action accept")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 description " + allow_er)
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state established enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 10 state related enable")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 action drop")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 description 'Drop invalid state'")
        ssh2.expect("#")
        ssh2.sendline(wan_in + "rule 20 state invalid enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall receive-redirects disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall send-redirects enable")
        ssh2.expect("#")
        ssh2.sendline("set firewall source-validation disable")
        ssh2.expect("#")
        ssh2.sendline("set firewall syn-cookies enable")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth0 address")
        ssh2.expect("#")
        ssh2.sendline("delete interfaces ethernet eth1 address")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 address dhcp")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 description WAN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall in name WAN_IN")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 firewall local name WAN_LOCAL")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 default-route auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 mtu 1492")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 name-server auto")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 password f0rget1t")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth7 pppoe 0 user-id techondemand")
        ssh2.expect("#")
        ssh2.sendline(bridge + "br0 address 192.168.1.1/24")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth0 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth1 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth2 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth3 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth4 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth5 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(ethernet + "eth6 bridge-group bridge br0")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "disabled false")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "hostfile-update disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "shared-network-name LAN authoritative enable")
        ssh2.expect("#")
        ssh2.sendline(net_name + "192.168.1.0/24 default-router 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 dns-server 192.168.1.1")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24 lease 86400")
        ssh2.expect("#")
        ssh2.sendline(dhcp+net_name+"192.168.1.0/24"+start_stop)
        ssh2.expect("#")
        ssh2.sendline(dhcp + "static-arp disable")
        ssh2.expect("#")
        ssh2.sendline(dhcp + "use-dnsmasq disable")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding cache-size 150")
        ssh2.expect("#")
        ssh2.sendline("set service dns forwarding listen-on br0")
        ssh2.expect("#")
        ssh2.sendline("set service gui http-port 80")
        ssh2.expect("#")
        ssh2.sendline("set service gui https-port 443")
        ssh2.expect("#")
        ssh2.sendline("set service gui older-ciphers enable")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 description 'masquerade for WAN'")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 outbound-interface eth4")
        ssh2.expect("#")
        ssh2.sendline(nat + "rule 5010 type masquerade")
        ssh2.expect("#")
        ssh2.sendline("set service unms connection " + unms_key)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + user_auth + newpass)
        ssh2.expect("#")
        ssh2.sendline(sys_login + "user " + new_user + "level admin")
        ssh2.expect("#")
        ssh2.sendline("commit ; save")
        ssh2.expect("[edit]")
    else:
        return 26
